<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="CodeGenerator" #>
<#@ import namespace="CodeGenerator.Model" #>
<#@ parameter type="CodeGenerator.Model.EntityClassInfo" name="entity" #>
<#@ parameter type="System.String" name="projectName" #>
<#@ output extension=".txt" #>

using System;
using System.Linq;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using MicroService.Data.Ext;
using MicroService.IApplication.<#= projectName #>;
using MicroService.IRespository.<#= projectName #>;
using MicroService.Entity.<#= projectName #>;
using MicroService.IApplication.<#= projectName #>.Dto;
using MicroService.Core.Data;
using MicroService.Data.Validation;
using MicroService.Data.Common;
using MicroService.Common.Models;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using MicroService.Application.<#= projectName #>.ValidatorsFilters;
 namespace MicroService.Application.<#= projectName #>
 {
	/// <summary>
	/// <#= entity.ClassName#> -applaction实现
	/// </summary>
	public class <#= entity.ClassName#>AppService:I<#= entity.ClassName#>AppService
	{
     
        private readonly I<#= entity.ClassName#>Respository _<#= entity.ClassNameLower #>Respository;
        private readonly IMapper _mapper;
        public <#= entity.ClassName#>AppService(I<#= entity.ClassName#>Respository <#= entity.ClassNameLower #>Respository,
          IMapper mapper)
        {
            _<#= entity.ClassNameLower #>Respository = <#= entity.ClassNameLower #>Respository;
            _mapper = mapper;
        }
    
        /// <summary>
          /// 新增
          /// </summary>
          /// <param name="<#= entity.ClassNameLower #>RequestDto"></param>
          /// <returns></returns>
        public async Task<bool> CreateAsync(<#= entity.ClassName#>RequestDto <#= entity.ClassNameLower #>RequestDto)
        {
         
            var <#= entity.ClassNameLower #> = _mapper.Map<<#= entity.ClassName#>RequestDto, <#= entity.ClassName#>>(<#= entity.ClassNameLower #>RequestDto);
            await <#= entity.ClassName#>ValidatorsFilter.DoValidationAsync(_<#= entity.ClassNameLower #>Respository,<#= entity.ClassNameLower #>, ValidatorTypeConstants.Create);
            return await _<#= entity.ClassNameLower#>Respository.InsertAsync(<#= entity.ClassNameLower #>);  
        }
        /// <summary>
        /// 批量新增
        /// </summary>
        /// <param name="<#= entity.ClassNameLower #>RequestDtos"></param>
        /// <returns></returns>
        public async Task<bool> BatchCreateAsync(IList<<#= entity.ClassName#>RequestDto> <#= entity.ClassNameLower #>RequestDtos)
        {
            var entities = <#= entity.ClassNameLower #>RequestDtos.MapToList<<#= entity.ClassName#>RequestDto, <#= entity.ClassName#>>();
            await <#= entity.ClassName#>ValidatorsFilter.DoValidationAsync(_<#= entity.ClassNameLower #>Respository,entities, ValidatorTypeConstants.Create);
            await _<#= entity.ClassNameLower#>Respository.BatchInsertAsync(entities);
            return true;
         
        }

      
        /// <summary>
        /// 分页获取
        /// </summary>
        /// <param name="<#= entity.ClassNameLower #>PageRequestDto"></param>
        /// <returns></returns>

        public async Task<PageData> GetPageListAsync( <#= entity.ClassName#>PageRequestDto <#= entity.ClassNameLower #>PageRequestDto)
        {
            var pageData = new PageData(<#= entity.ClassNameLower #>PageRequestDto.PageIndex, <#= entity.ClassNameLower #>PageRequestDto.PageSize);
            var list = await _<#= entity.ClassNameLower#>Respository.WherePaged(pageData, e => e.IsDelete == false,
                e => e.CreateDate, false);
			 pageData.Data = list.MapToList<<#= entity.ClassName#>, <#= entity.ClassName#>QueryDto>().ToList();
            return pageData;

        }

		/// <summary>
        /// 获取集合
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public async Task<IList<<#= entity.ClassName#>QueryDto>> QueryAsync(Expression<Func<<#= entity.ClassName#>, bool>> predicate)
        {
            var list =await  _<#= entity.ClassNameLower#>Respository.EntitiesByExpressionAsync(predicate); 
            return list.MapToList<<#= entity.ClassName#>, <#= entity.ClassName#>QueryDto>().ToList(); ;

        }
        /// <summary>
        /// 获取单条
        /// </summary>
        /// <param name="predicate"></param>
        /// <returns></returns>
        public async Task<<#= entity.ClassName#>QueryDto> QuerySingleAsync(Expression<Func<<#= entity.ClassName#>, bool>> predicate)
        {
            var entity = await _<#= entity.ClassNameLower#>Respository.FirstOrDefaultAsync(predicate);
			if (entity != null)
            {
                return entity.MapEntity<<#= entity.ClassName#>, <#= entity.ClassName#>QueryDto>();
            }
            return null;
        }

        /// <summary>
        /// 根据Id获取
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public async Task<<#= entity.ClassName#>QueryDto> Get<#= entity.ClassName#>ById(string Id)
        {
            var entity = await _<#= entity.ClassNameLower#>Respository.FirstOrDefaultAsync(e => e.Id == Id);
            if (entity != null)
            {
                return entity.MapEntity<<#= entity.ClassName#>, <#= entity.ClassName#>QueryDto>();
            }
            return null;
        }

        /// <summary>
        /// 获取详情
        /// </summary>
        /// <param name="entityQueryRequest"></param>
        /// <returns></returns>
        public async Task<<#= entity.ClassName#>QueryDto> GetForModifyAsync(EntityQueryRequest entityQueryRequest)
        {
            var entity = await _<#= entity.ClassNameLower#>Respository.FirstOrDefaultAsync(e => e.Id == entityQueryRequest.Id);
            if (entity != null)
            {
                return entity.MapEntity<<#= entity.ClassName#>, <#= entity.ClassName#>QueryDto>();
            }
            return null;
        }
        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="<#= entity.ClassNameLower #>RequestDto"></param>
        /// <returns></returns>
        public async Task<bool> ModifyAsync(<#= entity.ClassName#>RequestDto <#= entity.ClassNameLower #>RequestDto)
        {
            var <#= entity.ClassNameLower #> = _mapper.Map<<#= entity.ClassName#>RequestDto, <#= entity.ClassName#>>(<#= entity.ClassNameLower #>RequestDto);
            await <#= entity.ClassName#>ValidatorsFilter.DoValidationAsync(_<#= entity.ClassNameLower #>Respository,<#= entity.ClassNameLower #>, ValidatorTypeConstants.Modify);
            return await _<#= entity.ClassNameLower#>Respository.UpdateAsync(<#= entity.ClassNameLower #>); 
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public async Task<bool> RemoveAsync(params string[] ids)
        {
          return  await _<#= entity.ClassNameLower#>Respository.UpdateAsync(ids,  async (e)=> {
               await Task.Run(() =>
              {
                  e.IsDelete = true;
              });
           });
         
        }
	}
}